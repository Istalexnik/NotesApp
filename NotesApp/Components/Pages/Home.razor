@page "/"
@inject NotesApp.Services.NoteService NoteService
@inject NavigationManager NavigationManager

<h3>Notes</h3>

<button @onclick="CreateNewNote" class="btn btn-primary mb-3">Create New Note</button>

@if (notes != null && notes.Any())
{
    <div style="display: flex; flex-direction: column; gap: 8px;">
        @foreach (var note in notes)
        {
            <div style="display: flex; align-items: center; justify-content: space-between; padding: 8px; border: 1px solid #ddd; border-radius: 4px; width: 100%; box-sizing: border-box;">
                <!-- Title takes up remaining space and grows -->
                <span @onclick="() => EditNote(note.Id)" style="flex-grow: 1; cursor: pointer; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                    @note.Title
                </span>

                <!-- Delete button stays aligned to the right -->
                <button @onclick="() => DeleteNoteAsync(note.Id)" class="btn btn-danger btn-sm" style="flex-shrink: 0; margin-left: 16px;">
                    Delete
                </button>
            </div>
        }
    </div>
}
else
{
    <p>No notes available.</p>
}

@code {
    private List<Note> notes = new();

    protected override async Task OnInitializedAsync()
    {
        notes = await NoteService.GetAllNotesAsync();
    }

    private async Task DeleteNoteAsync(int id)
    {
        await NoteService.DeleteNoteAsync(id);
        notes = await NoteService.GetAllNotesAsync();
    }

    private void CreateNewNote()
    {
        NavigationManager.NavigateTo("/create-note");
    }

    private void EditNote(int id)
    {
        NavigationManager.NavigateTo($"/edit-note/{id}");
    }
}
