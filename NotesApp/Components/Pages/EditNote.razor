@page "/edit-note/{id:int}"
@inject NotesApp.Data.NoteRepository NoteRepository
@inject NavigationManager NavigationManager
@using NotesApp.Models

<h3>Edit Note</h3>

@if (note != null)
{
    <div class="form-group">
        <label>Title</label>
        <input @bind="note.Title" class="form-control" />
    </div>
    <div class="form-group">
        <label>Content</label>
        <textarea @bind="note.Content" class="form-control"></textarea>
    </div>

    <button @onclick="SaveNoteAsync" class="btn btn-primary">Save</button>
    <button @onclick="NavigateBack" class="btn btn-secondary ml-2">Back</button>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="text-danger">@errorMessage</p>
    }
}
else
{
    <p>Loading note...</p>
}

@code {
    [Parameter]
    public int id { get; set; }

    private Note? note;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        note = (await NoteRepository.GetNotesAsync()).FirstOrDefault(n => n.Id == id);

        if (note == null)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task SaveNoteAsync()
    {
        if (note == null) return;

        // Check for empty title
        if (string.IsNullOrWhiteSpace(note.Title))
        {
            errorMessage = "Title cannot be empty.";
            return;
        }

        // Check if title already exists for other notes
        if (await NoteRepository.TitleExistsAsync(note.Title, note.Id))
        {
            errorMessage = "A note with this title already exists.";
            return;
        }

        await NoteRepository.UpdateNoteAsync(note);

        NavigationManager.NavigateTo("/");
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/");
    }
}
